//beginner mode; 100 sample size;learner5 + allowed guessing
//after 552000 games, reduced number of epochs from 4 to 1
MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
                .seed(seed)
                //.l2(0.0001)
                .weightInit(WeightInit.XAVIER)
                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)
                .updater(new Adam(0.0001))
                //.updater(Updater.ADAM)
                .activation(Activation.RELU)
                
                .list()
                .layer(new ConvolutionLayer.Builder(5, 5).convolutionMode(ConvolutionMode.Same)
                        //nIn and nOut specify depth. nIn here is the nChannels and nOut is the number of filters to be applied
                		.stride(1,1)
                		.nIn(nChannels)
                        .nOut(25)
                        //.activation(Activation.RELU)
                        .build())
                .layer(new ConvolutionLayer.Builder(3, 3).convolutionMode(ConvolutionMode.Same)
                        //Note that nIn need not be specified in later layers
                        .nIn(25)
                	.nOut(32)
                        .stride(1,1)
                        //.activation(Activation.SIGMOID)
                        .build())
                .layer(new ConvolutionLayer.Builder(1, 1).convolutionMode(ConvolutionMode.Same)
                        //Note that nIn need not be specified in later layers
                		.stride(1,1)
                		.nIn(32)
                		.nOut(64)
                        .build())
                .layer(new ConvolutionLayer.Builder(1, 1)
                        //Note that nIn need not be specified in later layers
                		.stride(1,1)
                		.nOut(1)
                        //.activation(Activation.SIGMOID)
                        .build())
                
                .layer(new CnnLossLayer.Builder(LossFunctions.LossFunction.MSE)
                		//.activation(Activation.SIGMOID)
                		.build())
                .setInputType(InputType.convolutional(boardCols,boardCols,nChannels))
                .backpropType(BackpropType.Standard)
                .build();